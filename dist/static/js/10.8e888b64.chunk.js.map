{"version":3,"sources":["modules/DailyPrayer.js","lib/datetime.js"],"names":["DailyPrayer","props","id","isNullOrUndefined","location","state","useState","prayers","setPrayers","Date","date","setDate","isLoading","setIsLoading","useEffect","fetchPageData","fetchBy","a","FetchAPI","page","getDate","result","data","console","log","class","className","utils","DateFnsUtils","autoOk","variant","value","onChange","length","map","prayer","style","maxWidth","fontSize","title","src","FTP_URL","image_name","content","moment","require","format","getDateInDDMMYYYY"],"mappings":"kTAae,SAASA,EAAYC,GAClC,IAAIC,EAAMC,4BAAkBF,EAAMG,SAASC,QAAmC,KAAzBJ,EAAMG,SAASC,MACzD,EACCJ,EAAMG,SAASC,MAHc,EAKXC,mBAAS,IALE,mBAKlCC,EALkC,KAKzBC,EALyB,OAMjBF,mBAAS,IAAIG,MANI,mBAMlCC,EANkC,KAM5BC,EAN4B,OAOPL,oBAAS,GAPF,mBAOlCM,EAPkC,KAOvBC,EAPuB,KASzCC,qBAAU,WACRC,EAAc,KAAML,KACpB,IAEF,IAAMK,EAAa,uCAAG,WAAOC,EAASN,GAAhB,eAAAO,EAAA,6DACpBJ,GAAa,GADO,kBAGGK,IAASH,cAAc,CAC1CI,KAAM,cACNjB,GAAKA,EACLc,QAAUA,EACVN,KAAMU,YAAQV,KAPE,OAGZW,EAHY,OASlBb,EAAWa,EAAOC,MAClBT,GAAa,GACTV,4BAAkBkB,EAAOC,KAAK,GAAGZ,OAAiC,KAAxBW,EAAOC,KAAK,GAAGZ,MAC3DC,EAAQS,YAAQC,EAAOC,KAAK,GAAGZ,OAZf,kDAelBa,QAAQC,IAAI,WAAZ,MAfkB,0DAAH,wDAwBnB,OACE,kBAAC,WAAD,KACA,6BAASC,MAAM,gBACb,yBAAKA,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,YACT,yBAAKC,UAAU,gBACb,yBAAKD,MAAM,YACT,yBAAKA,MAAM,WACT,uBAAGC,UAAU,kBAAb,oBAEF,gCACE,kBAAC,IAAD,CAAyBC,MAAOC,KAC9B,kBAAC,IAAD,CACEC,QAAM,EACNC,QAAQ,SACRC,MAAOrB,EACPsB,SAtBD,SAACtB,GAClBC,EAAQD,GACRK,EAAc,OAAQL,WA2BhB,yBAAKe,MAAM,YACT,qCACIlB,EAAQ0B,OAAS,EAAI1B,EAAU,IAAI2B,KAAI,SAACC,GACxC,OACE,kBAAC,WAAD,KACE,yBAAKV,MAAM,aACT,yBAAKA,MAAM,YACT,yBAAKA,MAAM,UAAUW,MAAO,CAACC,SAAU,gBACrC,wBAAID,MAAO,CAAEE,SAAU,SAAUH,EAAOI,UAI9C,yBAAKd,MAAM,aACT,yBAAKA,MAAM,YACT,gCACE,yBAAKe,IAAKC,IAAU,2BAA6BN,EAAOO,WAAajB,MAAM,4BAIjF,yBAAKA,MAAM,aACT,yBAAKA,MAAM,YACT,6BACE,uBAAGA,MAAM,QAAT,IAAkBU,EAAOQ,QAAzB,QAIN,uCASD,IAAd/B,EAAqB,kBAAC,IAAD,MAAa,Q,gCC7GvC,wEAAMgC,EAASC,EAAQ,IAEhB,SAASzB,EAAQV,GACtB,OAAOkC,EAAOlC,GAAMoC,OAAO,cAiBtB,SAASC,EAAkBrC,GAChC,OAAOkC,EAAOlC,GAAMoC,OAAO","file":"static/js/10.8e888b64.chunk.js","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\nimport {isNullOrUndefined} from 'util';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\n// Components\nimport {getDate} from '../lib/datetime.js';\nimport Loader from '../common/FallbackLoader.js';\n\n//API\nimport FetchAPI from '../api/APIs.js';\nimport { FTP_URL } from '../api/config/Constants.js';\n\nexport default function DailyPrayer(props) {\n  let id = (isNullOrUndefined(props.location.state) || props.location.state === \"\") \n           ? 0\n           : (props.location.state);\n\n  const [prayers, setPrayers] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchPageData('Id', date);\n  },[]);\n\n  const fetchPageData = async (fetchBy, date) => {\n    setIsLoading(true);\n    try{\n      const result = await FetchAPI.fetchPageData({\n        page: 'DailyPrayer',\n        id : id,\n        fetchBy : fetchBy,\n        date: getDate(date),\n      });\n      setPrayers(result.data);\n      setIsLoading(false);\n      if(!isNullOrUndefined(result.data[0].date) || result.data[0].date !== \"\"){\n        setDate(getDate(result.data[0].date));\n      }\n    }catch(e){\n      console.log('Error...', e);\n    }\n  }\n\n  const handleDate = (date) => {\n    setDate(date);\n    fetchPageData('Date', date);\n  }\n\n  return(\n    <Fragment>\n    <section class=\"site-section\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <div className=\"calendar-box\">\n              <div class=\"block-16\">\n                <div class=\"heading\">\n                  <p className=\"calendar-title\">Prayer calendar</p>                  \n                </div>\n                <figure>\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <DatePicker \n                      autoOk\n                      variant=\"static\"\n                      value={date}\n                      onChange={handleDate}\n                    />\n                  </MuiPickersUtilsProvider>\n                </figure>\n              </div>\n            </div>\n          </div> \n          <div class=\"col-md-8\">\n            <blockquote>\n              {(prayers.length > 0 ? prayers : []).map((prayer) => {\n                return(\n                  <Fragment>\n                    <div class=\"col-md-12\">\n                      <div class=\"block-15\">\n                        <div class=\"heading\" style={{maxWidth: 'fit-content'}}>\n                          <h2 style={{ fontSize: '35px'}}>{prayer.title}</h2>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col-md-12\">\n                      <div class=\"block-16\">\n                        <figure>\n                          <img src={FTP_URL + '/api/images?path=Prayer/' + prayer.image_name}  class=\"img-fluid img-shadow\" />\n                        </figure>\n                      </div>\n                    </div>\n                    <div class=\"col-md-12\">\n                      <div class=\"block-15\">\n                        <div>\n                          <p class=\"mb-4\"> {prayer.content} </p>\n                        </div>\n                      </div>\n                    </div>\n                    <hr />\n                  </Fragment>\n                )\n              })}              \n            </blockquote>\n          </div>\n        </div>\n      </div>\n    </section>  \n    {isLoading === true ? <Loader /> : null}\n  </Fragment>\n  )\n}","const moment = require('moment');\n\nexport function getDate(date) {\n  return moment(date).format(\"YYYY-MM-DD\");\n}\n\nfunction getCurrentDateDBFormat() {\n  return moment().format(\"YYYY-MM-DD\")\n}\n\n\nfunction getCurrentDate() {\n  return moment().format(\"MM/DD/YYYY\")\n}\n\n\nexport function getCurrentDateInYYYYMMDD() {\n  return moment().format(\"YYYY/MM/DD\")\n}\n\nexport function getDateInDDMMYYYY(date) {\n  return moment(date).format(\"DD-MM-YYYY\")\n}\n\nfunction getCurrentDateDDMMYYYY() {\n  return moment().format(\"DD-MM-YYYY\")\n}\n\nfunction getTimeinDBFormat(date) {\n  return moment(date).format(\"HH:mm:ss\")\n}\n\nfunction getTime(date) {\n  return moment(date).format(\"HH:mm\")\n}\n\nfunction convertDateInUTC(date) {  \n  return moment.utc(date);  \n}\n\nfunction setDBDateFormat(date){\n  let day = date.split('-')[0];\n  let month = date.split('-')[1];\n  let year = date.split('-')[2];\n  return (year + '-' + month + '-' + day) ;\n}\n\nfunction isBirthDate(date){\n  const custDate = new Date(date);\n  const currDate = new Date();\n  return (custDate.getDate() === currDate.getDate() && custDate.getMonth() === currDate.getMonth());\n}\n\n\nfunction addOneDay(date){\n  return moment(date).add(1, 'days').format(\"YYYY-MM-DD\");  \n}\n\nfunction subtractOneDay(date){\n  return moment(date).subtract(1, 'days').format(\"YYYY-MM-DD\");  \n}\n\nfunction checkPastDate(date) {  \n  return moment(date).format(\"YYYY-MM-DD\") > getDate();\n}\n\nfunction checkFutureDate(date) {\n  return moment(date).format(\"YYYY-MM-DD\") < getDate();\n}\n\nfunction isSameDate(payment_date, settlement_date) {\n  console.log(payment_date === settlement_date, payment_date, settlement_date)\n  console.log(moment(payment_date) > moment(settlement_date), moment(payment_date) < moment(settlement_date))\n  return payment_date === settlement_date;\n}\n\nfunction checkOverDue(payment_date, settlement_date) {  \n  return moment(payment_date).format(\"YYYY-MM-DD\") > moment(settlement_date).format(\"YYYY-MM-DD\");\n}\n\nfunction escapeSunday(date){\n  return moment(date).format(\"dddd\") == \"Sunday\";\n}\n"],"sourceRoot":""}